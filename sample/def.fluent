# Definitions

# Note: `;` does not have a special meaning in the core language.
# It is just a token that is passed through the interpreter.
# It is used here as an output separator.

## Definitions are self-recursive.

# Erase a sequence of A's
def eraseA
    (cond (eraseA drop) () eq A dup)

eraseA ;
eraseA ;
eraseA A A A ;

print "\n"

## Definitions are mutually recursive.

# Erase a sequence of C's and D's
def eraseC
    (cond (eraseC drop) 
          (cond (eraseD drop)
                ()
                eq D dup)
          eq C dup)

def eraseD
      (cond (eraseD drop) 
            (cond (eraseC drop)
                  ()
                  eq D dup)
            eq C dup)

eraseC ;
eraseD ;
eraseC C ;
eraseC D ;
eraseD C ;
eraseD D ;
eraseC C C ;
eraseC C D ;
eraseC D C ;
eraseC D D ;
eraseC C C D D C D D C D ;

print "\n"
